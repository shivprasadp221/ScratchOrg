name: CI/CD for Salesforce Scratch Org

on:
  push:
    branches:
      - main   # Trigger the workflow for changes to the main branch or change as required
    paths-ignore:
      - 'assets/scratch-org-mappings.json'  

jobs:
  push-to-scratch-org:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install Salesforce CLI 
      - name: 'Install Salesforce CLI' 
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      # Step 2: Checkout the source code (with full history)
      - name: 'Checkout code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 3: Get alias based on the branch
      - name: 'Get Scratch Org Alias from Mapping File'
        id: get_alias
        run: |
          # Get the current branch name
          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Branch Name: $BRANCH_NAME"

          # Read the alias from the scratch-org-mappings.json file
          ALIAS=$(jq -r ".result.alias" ./assets/scratch-org-mappings.json)
          USERNAME=$(jq -r ".result.username" ./assets/scratch-org-mappings.json)


          if [ "$ALIAS" == "null" ]; then
            echo "No alias found for branch $BRANCH_NAME"
          fi

          echo "SCRATCH_ALIAS=$ALIAS" >> $GITHUB_ENV
          echo "SCRATCH_USERNAME=$USERNAME" >> $GITHUB_ENV
          echo "::set-output name=alias::$ALIAS"
          
           # Set outputs for alias and username using environment variables instead of output
          echo "SCRATCH_ALIAS=$ALIAS" >> $GITHUB_ENV
          echo "SCRATCH_USERNAME=$USERNAME" >> $GITHUB_ENV
          
      # Step 4: Authenticate with Salesforce DevHub using JWT
      - name: 'Authenticate with DevHub'
        run: |
          echo "Authenticating DEVHUB"
          sf org login jwt --client-id=${{ secrets.SALESFORCE_DEVHUB_CONSUMER_KEY }} \
                                    --jwt-key-file=./assets/server.key \
                                    --username=${{ secrets.SALESFORCE_DEVHUB_USERNAME }} \
                                    --set-default-dev-hub \
                                    --alias DEVHUB

      # Step 5: Query Salesforce to get the LoginUrl
      - name: 'Get LoginUrl for Scratch Org'
        id: get_login_url
        run: |
          echo "Running data query to get LoginUrl for $SCRATCH_USERNAME..."
          
          # Run the SF query and capture the result
          QUERY_RESULT=$(sf data query --target-org DEVHUB --query "SELECT SignupUsername, LoginUrl FROM ScratchOrgInfo WHERE SignupUsername='$SCRATCH_USERNAME'" --json)
      
          # Output the raw JSON result for debugging
          echo "Raw query result: $QUERY_RESULT"
      
          # Check if result.records is empty
          RESULT_LENGTH=$(echo "$QUERY_RESULT" | jq '.result.records | length')
          if [ "$RESULT_LENGTH" -eq 0 ]; then
            echo "No results found for SignupUsername '$SCRATCH_USERNAME'."
            exit 1
          fi
      
          # Extract LoginUrl from the first record in result.records
          LOGIN_URL=$(echo "$QUERY_RESULT" | jq -r '.result.records[0].LoginUrl')
      
          # Check if LoginUrl is valid
          if [ "$LOGIN_URL" == "null" ]; then
            echo "No LoginUrl found for SignupUsername '$SCRATCH_USERNAME'."
            exit 1
          fi
      
          echo "LoginUrl for the Scratch Org is: $LOGIN_URL"
          echo "SCRATCH_LOGIN_URL=$LOGIN_URL" >> $GITHUB_ENV

      # Step 6: Authenticate with Scratch Org using JWT
      - name: 'Authenticate with Scratch Org'
        run: |
          echo "Authenticating with Scratch Org"
          sfdx force:auth:jwt:grant --client-id=${{ secrets.SALESFORCE_DEVHUB_CONSUMER_KEY }} \
                                    --jwt-key-file=./assets/server.key \
                                    --username=$SCRATCH_USERNAME \
                                    --alias $SCRATCH_ALIAS \
                                    --instance-url $SCRATCH_LOGIN_URL

        # Step 5: Display Salesforce Org Info and Check Status
      - name: 'Display Salesforce Org Info and Check Status'
        id: check_status
        run: |
          echo "Checking org status for $SCRATCH_USERNAME"
          sf org display --target-org $SCRATCH_USERNAME --json
          # Get the org status info in JSON format
          ORG_INFO_JSON=$(sf org display --target-org "$SCRATCH_USERNAME" --json)
          
          # Check the status of the org inside the 'result' object
          STATUS=$(echo "$ORG_INFO_JSON" | jq -r '.result.status')

          # Output status for debugging
          echo "Org Status: $STATUS"

          # Check if status is not "Active"
          if [ "$STATUS" != "Active" ]; then
            echo "Org status is not Active."
            echo "ORGSTATUS=false" >> $GITHUB_ENV
          else
            echo "Org status is Active. Proceeding with regular flow."
            echo "ORGSTATUS=true" >> $GITHUB_ENV
          fi

     # Step 3: Get the checkout branch name
      - name: 'Get Checkout Branch Name'
        id: get_branch_name
        if: env.ORGSTATUS == 'false'
        run: |
          # Extract the branch name from GITHUB_REF
          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
            # For pull requests, use the head ref (source branch)
            BRANCH_NAME=${GITHUB_HEAD_REF}
          else
            echo "Unsupported ref: $GITHUB_REF"
            exit 1
          fi

          echo "Checkout Branch Name: $BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV  # Set as environment variable
          echo "::set-output name=branch_name::$BRANCH_NAME"  # Set as step output
          
     # Step 6: Create Scratch Org from Snapshot if Status is Inactive
      - name: 'Create Scratch Org from Snapshot'
        if: env.ORGSTATUS == 'false'
        run: |
          # Dynamically create alias using branch name and today's date
          TODAY_DATE=$(date +'%Y-%m-%d')
          DYNAMIC_ALIAS="${BRANCH_NAME}-${TODAY_DATE}"
          echo "DYNAMIC_ALIAS=$DYNAMIC_ALIAS" >> $GITHUB_ENV
          echo "::set-output name=dynamic_alias::$DYNAMIC_ALIAS"
          echo "Creating Scratch Org with alias: $DYNAMIC_ALIAS"
          
          sf org create scratch --definition-file config/snapshot-scratch-def.json --alias $DYNAMIC_ALIAS --wait 10 --target-dev-hub ${{ secrets.SALESFORCE_DEVHUB_USERNAME }}
                                
          # Generate the password for the new scratch org
          PASSWORD=$(sf org generate password --length 12 --target-org $DYNAMIC_ALIAS | sed "s/'/''/g" | tr -d '\n')          
          APEX_CODE="String orgDetails = '$PASSWORD';Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();mail.setToAddresses(new String[] {'shivprasad.patil@chargebee.com'});mail.setSubject('New scratch org has been created.');mail.setPlainTextBody(orgDetails+'.');Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});"

            # Save the Apex code to a file
            echo "$APEX_CODE" > dynamic.apex
        
            sf apex run --target-org ${{ secrets.SALESFORCE_DEVHUB_USERNAME }} --file dynamic.apex
            rm dynamic.apex
            # Get the org status info in JSON format
            NEW_ORG_INFO_JSON=$(sf org display --target-org "$DYNAMIC_ALIAS" --json)
          
            echo "$NEW_ORG_INFO_JSON" > ./assets/scratch-org-mappings.json
            git config --global user.name "shivprasadp221"
            git config --global user.email "shivprasadp221@gmail.com.com"
            # Commit the updated scratch-org-mappings.json file
            git add ./assets/scratch-org-mappings.json
            git commit -m "Update Scratch Org Info for $DYNAMIC_ALIAS"
            git push
                                
      # Step 7: Push source code to Scratch Org (only changed files)
      - name: 'Push Source to Scratch Org'
        run: |
          echo "Pushing source code to Scratch Org: $SCRATCH_ALIAS"
          sf project deploy start --target-org $SCRATCH_ALIAS \
                                   --wait 10 --ignore-conflicts
